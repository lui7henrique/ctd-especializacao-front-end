{"ast":null,"code":"var _jsxFileName = \"/Users/luizhenrique/Desktop/projetos/ctd-especializacao-front-end/mesa-aula01/src/components/Input/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { usePokedex } from \"../../context/contextoFormulario\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = _ref => {\n  _s();\n\n  let {\n    name,\n    label,\n    type = \"text\"\n  } = _ref;\n  const {\n    formState,\n    setFormState\n  } = usePokedex();\n  const [value, setValue] = useState(\"\"); // Aqui devemos acessar o estado global para obter os dados\n  // do formulário e uma maneira de atualizá-los.\n  // Além disso, usaremos um estado local para lidar com o estado da input.\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  const onBlur = e => {\n    e.preventDefault(); // Aqui devemos atualizar o estado global com os dados de\n    // cada entrada.\n    // DICA: Podemos usar o nome de cada entrada para salvar\n    // os dados no estado global usando uma notação { chave: valor }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-receptor\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: type,\n      id: name,\n      onChange: onChange,\n      onBlur: onBlur,\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"wJpNnnlv79/XcSqiDICSVLXVVEw=\", false, function () {\n  return [usePokedex];\n});\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/luizhenrique/Desktop/projetos/ctd-especializacao-front-end/mesa-aula01/src/components/Input/index.jsx"],"names":["React","useState","usePokedex","Input","name","label","type","formState","setFormState","value","setValue","onChange","e","target","onBlur","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,kCAA3B;;;AAEA,MAAMC,KAAK,GAAG,QAAoC;AAAA;;AAAA,MAAnC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,IAAI,GAAG;AAAtB,GAAmC;AAChD,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA8BN,UAAU,EAA9C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC,CAFgD,CAIhD;AACA;AAEA;;AAEA,QAAMU,QAAQ,GAAIC,CAAD,IAAO;AACtBF,IAAAA,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAR;AACD,GAFD;;AAIA,QAAMK,MAAM,GAAIF,CAAD,IAAO;AACpBA,IAAAA,CAAC,CAACG,cAAF,GADoB,CAGpB;AACA;AACA;AACA;AACD,GAPD;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE;AAAO,MAAA,OAAO,EAAEX,IAAhB;AAAA,gBAAuBC;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AACE,MAAA,IAAI,EAAEC,IADR;AAEE,MAAA,EAAE,EAAEF,IAFN;AAGE,MAAA,QAAQ,EAAEO,QAHZ;AAIE,MAAA,MAAM,EAAEG,MAJV;AAKE,MAAA,KAAK,EAAEL;AALT;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAnCD;;GAAMN,K;UACgCD,U;;;KADhCC,K;AAqCN,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { usePokedex } from \"../../context/contextoFormulario\";\n\nconst Input = ({ name, label, type = \"text\" }) => {\n  const { formState, setFormState } = usePokedex();\n  const [value, setValue] = useState(\"\");\n\n  // Aqui devemos acessar o estado global para obter os dados\n  // do formulário e uma maneira de atualizá-los.\n\n  // Além disso, usaremos um estado local para lidar com o estado da input.\n\n  const onChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const onBlur = (e) => {\n    e.preventDefault();\n\n    // Aqui devemos atualizar o estado global com os dados de\n    // cada entrada.\n    // DICA: Podemos usar o nome de cada entrada para salvar\n    // os dados no estado global usando uma notação { chave: valor }\n  };\n\n  return (\n    <div className=\"input-receptor\">\n      <label htmlFor={name}>{label}</label>\n\n      <input\n        type={type}\n        id={name}\n        onChange={onChange}\n        onBlur={onBlur}\n        value={value}\n      />\n    </div>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}