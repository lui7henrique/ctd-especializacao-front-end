{"ast":null,"code":"var _jsxFileName = \"/Users/luizhenrique/Desktop/projetos/ctd-especializacao-front-end/mesa-aula01/src/components/Input/index.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = _ref => {\n  let {\n    name,\n    label,\n    type = \"text\"\n  } = _ref;\n\n  // Aqui devemos acessar o estado global para obter os dados\n  // do formulário e uma maneira de atualizá-los.\n  // Além disso, usaremos um estado local para lidar com o estado da input.\n  const onChange = e => {// Aqui devemos atualizar o estado local do input\n  };\n\n  const onBlur = e => {\n    e.preventDefault(); // Aqui devemos atualizar o estado global com os dados de\n    // cada entrada.\n    // DICA: Podemos usar o nome de cada entrada para salvar\n    // os dados no estado global usando uma notação { chave: valor }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-receptor\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: type,\n      id: name,\n      onChange: onChange,\n      onBlur: onBlur\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/luizhenrique/Desktop/projetos/ctd-especializacao-front-end/mesa-aula01/src/components/Input/index.jsx"],"names":["React","Input","name","label","type","onChange","e","onBlur","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,KAAK,GAAG,QAAoC;AAAA,MAAnC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,IAAI,GAAG;AAAtB,GAAmC;;AAChD;AACA;AAEA;AAEA,QAAMC,QAAQ,GAAIC,CAAD,IAAO,CACtB;AACD,GAFD;;AAIA,QAAMC,MAAM,GAAID,CAAD,IAAO;AACpBA,IAAAA,CAAC,CAACE,cAAF,GADoB,CAGpB;AACA;AACA;AACA;AACD,GAPD;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE;AAAO,MAAA,OAAO,EAAEN,IAAhB;AAAA,gBAAuBC;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAO,MAAA,IAAI,EAAEC,IAAb;AAAmB,MAAA,EAAE,EAAEF,IAAvB;AAA6B,MAAA,QAAQ,EAAEG,QAAvC;AAAiD,MAAA,MAAM,EAAEE;AAAzD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA1BD;;KAAMN,K;AA4BN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\n\nconst Input = ({ name, label, type = \"text\" }) => {\n  // Aqui devemos acessar o estado global para obter os dados\n  // do formulário e uma maneira de atualizá-los.\n\n  // Além disso, usaremos um estado local para lidar com o estado da input.\n\n  const onChange = (e) => {\n    // Aqui devemos atualizar o estado local do input\n  };\n\n  const onBlur = (e) => {\n    e.preventDefault();\n\n    // Aqui devemos atualizar o estado global com os dados de\n    // cada entrada.\n    // DICA: Podemos usar o nome de cada entrada para salvar\n    // os dados no estado global usando uma notação { chave: valor }\n  };\n\n  return (\n    <div className=\"input-receptor\">\n      <label htmlFor={name}>{label}</label>\n\n      <input type={type} id={name} onChange={onChange} onBlur={onBlur} />\n    </div>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}